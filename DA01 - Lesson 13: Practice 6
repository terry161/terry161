--- Task 1: datalemur-duplicate-job-listings.
  ** Method 1: SUBQUERIES in FROM
SELECT count(DISTINCT company_id)
FROM(select company_id,
            COUNT(job_id) as counting,
            title,
            description
      from job_listings
      GROUP BY company_id, title, description
      order by company_id) as dupplicate_table
  WHERE counting > 1

** Method 2: CTE
WITH duplicate_table as 
  (SELECT company_id,
          COUNT(job_id) as counting,
          title,
          description
  FROM job_listings
  GROUP BY company_id, title, description
  ORDER BY company_id)
      
SELECT count(DISTINCT company_id)
FROM duplicate_table
where counting > 1



--- Task 2: datalemur-highest-grossing.
WITH table1 AS
   (SELECT
       category,
       product,
       SUM(spend) AS total_spend,
       RANK() OVER(
       PARTITION BY category
       ORDER BY SUM(spend) DESC) AS ranking
    FROM product_spend
    WHERE EXTRACT(YEAR FROM transaction_date) = 2022
    GROUP BY category, product)
    
SELECT
  category,
  product,
  total_spend
FROM table1
WHERE ranking <=2
ORDER BY category, total_spend DESC


--- Task 3: datalemur-frequent-callers.
WITH abc AS
  (SELECT policy_holder_id as UHG,
          count(call_date) as count1
    FROM callers
    GROUP BY policy_holder_id)
    
SELECT COUNT(UHG)
FROM abc
WHERE count1 >=3

--- Task 4: datalemur-page-with-no-likes.
SELECT a1.page_id
FROM pages AS a1
LEFT JOIN page_likes AS a2
ON a1.page_id = a2.page_id
WHERE a2.page_id IS NULL
ORDER BY a1.page_id


--- Task 5: datalemur-user-retention.


--- Task 6: leetcode-monthly-transactions.
WITH abc AS
    (SELECT *,
        DATE_FORMAT(trans_date,"%Y-%m") as month
    FROM transactions)

SELECT abc.month, 
    abc.country,
    COUNT(*) AS trans_count,
    SUM(CASE WHEN abc.state = "approved" THEN 1 ELSE 0 END) AS approved_count,
    SUM(abc.amount) AS trans_total_amount,
    SUM(CASE WHEN abc.state = "approved" THEN abc.amount ELSE 0 END) as approved_total_amount
FROM abc
GROUP BY abc.month, abc.country

--- Task 7: leetcode-product-sales-analysis.
** Method 1: CTE
WITH table1 AS 
    (Select a.*, 
            b.product_name, 
            RANK() OVER(PARTITION BY product_name ORDER BY year ASC) AS check_year
    FROM Sales AS a
    INNER JOIN Product AS b
    ON a.product_id = b.product_id)
SELECT product_id,
    year AS first_year,
    quantity,
    price
FROM table1
WHERE check_year = 1
ORDER year ASC

** Method 2: SUBQUERRY
SELECT xyz.product_id, 
        xyz.year as first_year, 
        xyz.quantity, xyz.price
FROM (Select a.*, 
            b.product_name, 
            rank() over(partition by product_name order by year ASC) as check_year
        FROM Sales AS a
        INNER JOIN Product AS b
        ON a.product_id = b.product_id
        ) AS xyz
WHERE xyz.check_year = 1
ORDER BY xyz.year ASC


--- Task 9: leetcode-employees-whose-manager-left-the-company.
** Method 1: SUBQUERY in WHERE
select employee_id
from employees
where salary < 30000 
    and manager_id is not NULL 
    and manager_id not in (select employee_id from employees)


--- Task 10: leetcode-primary-department-for-each-employee.


--- Task 11: leetcode-movie-rating.


--- Task 12: leetcode-who-has-the-most-friends.
